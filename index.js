var singleNumber = function (nums) {
  let x = 0
  //异或，因为相同的都被处理掉了，所以如果设两个只出现一次的数位x1,x2;
  // 显而易见，x与数组所有元素异或，一定有 x = x1 ^ x2;
  nums.forEach((e) => {
    x = x ^ e
  })
  // 设x1,x2;
  let x1 = 0;
  let x2 = 0;

  //剩下的就比较关键了；已知x = x1 ^ x2 怎么找出x1,x2呢？

  // 首先知道的条件，x != 0 ;因为如果 x == 0;则x1 == x2;
  // 既然x1 !== x2;
  // 那必然后x1的二进制与x2的二进制在某一位上不同；(这个条件是重点!!!!!!，理解这句话这题就明白了)；二进制嘛，特征明显，非0即1；
  // 假设 x1的二进制与x2的二进制再第k为不相同；那是不是第k位一定有一个是0；而另一个是1；
  
  //由以上的表述，将数组数据分为两类，一类k位置为0;一类k位置为1；奇妙的事情发生了；因为除了x1,x2外数组其他数据两两相等，那么，俩俩相等的数据一定会被分配到同一个类型中；
  // 同一类型中相同的数据会被抵消，抵消之后一类剩余x1,而另一类必然剩余x2

  // 哈哈，是不是很熟悉，第136题的代码是不是出现在了眼前；





  console.log(x)
}

var nums = [1, 2, 1, 3, 2, 5]
const aa = singleNumber(nums)
